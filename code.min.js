let validKey = false; // Global flag for key validity
let mode = 'encode';

// Check if the key is still valid on page load
function restoreSessionKey() {
  // Clear key on page load
  sessionStorage.removeItem("validKey");
  sessionStorage.removeItem("keyTime");
  validKey = false;

  toggleVisibility();
}



// Show/hide key input and main container depending on validKey
function toggleVisibility() {
  if (validKey) {
    document.getElementById("keyContainer").style.display = "none";
    document.getElementById("mainContainer").style.display = "flex";
  } else {
    document.getElementById("keyContainer").style.display = "flex";
    document.getElementById("mainContainer").style.display = "none";
  }
}

// Check if session key is still valid (use before encoding/decoding)
function checkSessionKey() {
  const savedKey = sessionStorage.getItem("validKey");
  const savedTime = sessionStorage.getItem("keyTime");

  if (savedKey === "true" && savedTime) {
    const now = Date.now();
    const elapsed = now - parseInt(savedTime);

    if (elapsed < 30 * 60 * 1000) {
      validKey = true;
    } else {
      sessionStorage.removeItem("validKey");
      sessionStorage.removeItem("keyTime");
      validKey = false;
      toggleVisibility();
    }
  } else {
    validKey = false;
    toggleVisibility();
  }
}

const map = {
  A: '4', B: '8', C: '<', D: '>', E: '3', F: '%',
  G: '9', H: '#', I: '1', J: '6', K: '{', L: '!',
  M: '|', N: '-', O: '0', P: '?', Q: '0,', R: '&',
  S: '5', T: '+', U: '=', V: '*', W: '**', X: ')(',
  Y: '7', Z: '2'
};

const reverseMap = {};
for (let key in map) reverseMap[map[key]] = key;

function encode(text) {
  let result = "";
  text = text.toUpperCase();
  for (let i = 0; i < text.length; i++) {
    const char = text[i];
    if (char === 'W' && text[i + 1] === 'W') {
      result += map['W'];
      i++;
    } else {
      result += map[char] || char;
    }
  }
  return result;
}

function decode(code) {
  let result = "";
  for (let i = 0; i < code.length;) {
    const two = code.slice(i, i + 2);
    if (two === '**') {
      result += 'W';
      i += 2;
    } else if (two === '0,') {
      result += 'Q';
      i += 2;
    } else if (two === ')(') {
      result += 'X';
      i += 2;
    } else {
      const char = code[i];
      result += reverseMap[char] || char;
      i++;
    }
  }
  return result.toLowerCase();
}

function handleEncode() {
  const input1 = document.getElementById("input1").value.trim();
  const input2 = document.getElementById("input2");

  if (!input1) {
    showNotification("Veuillez entrer du texte à encoder/décoder.", "error");
    return;
  }

  checkSessionKey();

  if (!validKey) {
    // Show key input container if not valid
    toggleVisibility();
    return;
  }

  input2.value = (mode === 'encode') ? encode(input1) : decode(input1);
  showNotification("Succès : Texte traité avec succès !", "success");
}

function toggleMode() {
  mode = mode === 'encode' ? 'decode' : 'encode';
  document.getElementById("label1").textContent = mode === 'encode' ? "Texte clair" : "Texte codé";
  document.getElementById("label2").textContent = mode === 'encode' ? "Texte codé" : "Texte clair";

  const temp = document.getElementById("input1").value;
  document.getElementById("input1").value = document.getElementById("input2").value;
  document.getElementById("input2").value = temp;

  clearNotification();
}

function showNotification(message, type = "success") {
  const toast = document.getElementById("toast");
  toast.textContent = message;
  toast.className = `toast ${type} show`;
  setTimeout(() => toast.classList.remove("show"), 2000);
}

function copyToClipboard(id) {
  const textarea = document.getElementById(id);
  const text = textarea.value.trim();

  if (!text) {
    showNotification("Aucun texte à copier", "error");
    return;
  }

  navigator.clipboard.writeText(text).then(() => {
    showNotification("Copié avec succès", "success");
  });
}

// Submit key from key input container
function submitKey() {
  const keyInput = document.getElementById("secretKey");
  const key = keyInput.value.trim();

  if (key !== "ma7lol") {
    showNotification("Clé incorrecte", "error");
    return;
  }

  sessionStorage.setItem("validKey", "true");
  sessionStorage.setItem("keyTime", Date.now().toString());

  validKey = true;
  toggleVisibility();
  showNotification("Clé acceptée !", "success");

  // Optionally clear the key input after success
  keyInput.value = "";

  // If you want to auto-encode on key acceptance (optional)
  // handleEncode();
}

// Call restoreSessionKey on script load (page load)
restoreSessionKey();
